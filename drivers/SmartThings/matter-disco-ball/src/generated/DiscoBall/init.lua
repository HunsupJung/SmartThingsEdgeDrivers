-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local DiscoBallServerAttributes = require "generated.DiscoBall.server.attributes"
local DiscoBallServerCommands = require "generated.DiscoBall.server.commands"
local DiscoBallClientCommands = require "generated.DiscoBall.client.commands"
local DiscoBallEvents = require "generated.DiscoBall.server.events"
local DiscoBallTypes = require "generated.DiscoBall.types"

--- @class generated.DiscoBall
--- @alias DiscoBall
---
--- @field public ID number 0x3456 the ID of this cluster
--- @field public NAME string "DiscoBall" the name of this cluster
--- @field public attributes generated.DiscoBallServerAttributes | generated.DiscoBallClientAttributes
--- @field public commands generated.DiscoBallServerCommands | generated.DiscoBallClientCommands
--- @field public types generated.DiscoBallTypes

local DiscoBall = {}

DiscoBall.ID = 0x3456
DiscoBall.NAME = "DiscoBall"
DiscoBall.server = {}
DiscoBall.client = {}
DiscoBall.server.attributes = DiscoBallServerAttributes:set_parent_cluster(DiscoBall)
DiscoBall.server.commands = DiscoBallServerCommands:set_parent_cluster(DiscoBall)
DiscoBall.client.commands = DiscoBallClientCommands:set_parent_cluster(DiscoBall)
DiscoBall.server.events = DiscoBallEvents:set_parent_cluster(DiscoBall)
DiscoBall.types = DiscoBallTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function DiscoBall:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "Run",
    [0x0001] = "Rotate",
    [0x0002] = "Speed",
    [0x0003] = "Axis",
    [0x0004] = "WobbleSpeed",
    [0x0005] = "Pattern",
    [0x0006] = "Name",
    [0x0007] = "WobbleSupport",
    [0x0008] = "WobbleSetting",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFA] = "EventList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function DiscoBall:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "StartRequest",
    [0x0001] = "StopRequest",
    [0x0002] = "ReverseRequest",
    [0x0003] = "WobbleRequest",
    [0x0004] = "PatternRequest",
    [0x0005] = "StatsRequest",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function DiscoBall:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x0006] = "StatsResponse",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

--- Find an event by id
---
--- @param event_id number
function DiscoBall:get_event_by_id(event_id)
  local event_id_map = {
    [0x0000] = "Started",
    [0x0001] = "Stopped",
  }
  if event_id_map[event_id] ~= nil then
    return self.server.events[event_id_map[event_id]]
  end
  return nil
end
-- Attribute Mapping
DiscoBall.attribute_direction_map = {
  ["Run"] = "server",
  ["Rotate"] = "server",
  ["Speed"] = "server",
  ["Axis"] = "server",
  ["WobbleSpeed"] = "server",
  ["Pattern"] = "server",
  ["Name"] = "server",
  ["WobbleSupport"] = "server",
  ["WobbleSetting"] = "server",
  ["AcceptedCommandList"] = "server",
  ["EventList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
DiscoBall.command_direction_map = {
  ["StartRequest"] = "server",
  ["StopRequest"] = "server",
  ["ReverseRequest"] = "server",
  ["WobbleRequest"] = "server",
  ["PatternRequest"] = "server",
  ["StatsRequest"] = "server",
  ["StatsResponse"] = "client",
}

DiscoBall.FeatureMap = DiscoBall.types.Feature

function DiscoBall.are_features_supported(feature, feature_map)
  if (DiscoBall.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = DiscoBall.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, DiscoBall.NAME))
  end
  return DiscoBall[direction].attributes[key]
end
DiscoBall.attributes = {}
setmetatable(DiscoBall.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = DiscoBall.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, DiscoBall.NAME))
  end
  return DiscoBall[direction].commands[key] 
end
DiscoBall.commands = {}
setmetatable(DiscoBall.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return DiscoBall.server.events[key]
end
DiscoBall.events = {}
setmetatable(DiscoBall.events, event_helper_mt)

setmetatable(DiscoBall, {__index = cluster_base})  

return DiscoBall

