-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.DiscoBall.types.Feature
--- @alias Feature
---
--- @field public PARTY number 1
--- @field public AXIS number 2
--- @field public WOBBLE number 4
--- @field public PATTERN number 8
--- @field public STATISTICS number 16
--- @field public REVERSE number 32

local Feature = {}
local new_mt = UintABC.new_mt({NAME = "Feature", ID = data_types.name_to_id_map["Uint32"]}, 4)

Feature.BASE_MASK = 0xFFFF
Feature.PARTY = 0x0001
Feature.AXIS = 0x0002
Feature.WOBBLE = 0x0004
Feature.PATTERN = 0x0008
Feature.STATISTICS = 0x0010
Feature.REVERSE = 0x0020

Feature.mask_fields = {
  BASE_MASK = 0xFFFF,
  PARTY = 0x0001,
  AXIS = 0x0002,
  WOBBLE = 0x0004,
  PATTERN = 0x0008,
  STATISTICS = 0x0010,
  REVERSE = 0x0020,
}

--- @function Feature:is_party_set
--- @return boolean True if the value of PARTY is non-zero
Feature.is_party_set = function(self)
  return (self.value & self.PARTY) ~= 0
end

--- @function Feature:set_party
--- Set the value of the bit in the PARTY field to 1
Feature.set_party = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PARTY
  else
    self.value = self.PARTY
  end
end

--- @function Feature:unset_party
--- Set the value of the bits in the PARTY field to 0
Feature.unset_party = function(self)
  self.value = self.value & (~self.PARTY & self.BASE_MASK)
end
--- @function Feature:is_axis_set
--- @return boolean True if the value of AXIS is non-zero
Feature.is_axis_set = function(self)
  return (self.value & self.AXIS) ~= 0
end

--- @function Feature:set_axis
--- Set the value of the bit in the AXIS field to 1
Feature.set_axis = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AXIS
  else
    self.value = self.AXIS
  end
end

--- @function Feature:unset_axis
--- Set the value of the bits in the AXIS field to 0
Feature.unset_axis = function(self)
  self.value = self.value & (~self.AXIS & self.BASE_MASK)
end
--- @function Feature:is_wobble_set
--- @return boolean True if the value of WOBBLE is non-zero
Feature.is_wobble_set = function(self)
  return (self.value & self.WOBBLE) ~= 0
end

--- @function Feature:set_wobble
--- Set the value of the bit in the WOBBLE field to 1
Feature.set_wobble = function(self)
  if self.value ~= nil then
    self.value = self.value | self.WOBBLE
  else
    self.value = self.WOBBLE
  end
end

--- @function Feature:unset_wobble
--- Set the value of the bits in the WOBBLE field to 0
Feature.unset_wobble = function(self)
  self.value = self.value & (~self.WOBBLE & self.BASE_MASK)
end
--- @function Feature:is_pattern_set
--- @return boolean True if the value of PATTERN is non-zero
Feature.is_pattern_set = function(self)
  return (self.value & self.PATTERN) ~= 0
end

--- @function Feature:set_pattern
--- Set the value of the bit in the PATTERN field to 1
Feature.set_pattern = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PATTERN
  else
    self.value = self.PATTERN
  end
end

--- @function Feature:unset_pattern
--- Set the value of the bits in the PATTERN field to 0
Feature.unset_pattern = function(self)
  self.value = self.value & (~self.PATTERN & self.BASE_MASK)
end
--- @function Feature:is_statistics_set
--- @return boolean True if the value of STATISTICS is non-zero
Feature.is_statistics_set = function(self)
  return (self.value & self.STATISTICS) ~= 0
end

--- @function Feature:set_statistics
--- Set the value of the bit in the STATISTICS field to 1
Feature.set_statistics = function(self)
  if self.value ~= nil then
    self.value = self.value | self.STATISTICS
  else
    self.value = self.STATISTICS
  end
end

--- @function Feature:unset_statistics
--- Set the value of the bits in the STATISTICS field to 0
Feature.unset_statistics = function(self)
  self.value = self.value & (~self.STATISTICS & self.BASE_MASK)
end
--- @function Feature:is_reverse_set
--- @return boolean True if the value of REVERSE is non-zero
Feature.is_reverse_set = function(self)
  return (self.value & self.REVERSE) ~= 0
end

--- @function Feature:set_reverse
--- Set the value of the bit in the REVERSE field to 1
Feature.set_reverse = function(self)
  if self.value ~= nil then
    self.value = self.value | self.REVERSE
  else
    self.value = self.REVERSE
  end
end

--- @function Feature:unset_reverse
--- Set the value of the bits in the REVERSE field to 0
Feature.unset_reverse = function(self)
  self.value = self.value & (~self.REVERSE & self.BASE_MASK)
end

function Feature.bits_are_valid(feature)
  local max =
    Feature.PARTY | 
    Feature.AXIS | 
    Feature.WOBBLE | 
    Feature.PATTERN | 
    Feature.STATISTICS | 
    Feature.REVERSE
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

Feature.mask_methods = {
  is_party_set = Feature.is_party_set,
  set_party = Feature.set_party,
  unset_party = Feature.unset_party,
  is_axis_set = Feature.is_axis_set,
  set_axis = Feature.set_axis,
  unset_axis = Feature.unset_axis,
  is_wobble_set = Feature.is_wobble_set,
  set_wobble = Feature.set_wobble,
  unset_wobble = Feature.unset_wobble,
  is_pattern_set = Feature.is_pattern_set,
  set_pattern = Feature.set_pattern,
  unset_pattern = Feature.unset_pattern,
  is_statistics_set = Feature.is_statistics_set,
  set_statistics = Feature.set_statistics,
  unset_statistics = Feature.unset_statistics,
  is_reverse_set = Feature.is_reverse_set,
  set_reverse = Feature.set_reverse,
  unset_reverse = Feature.unset_reverse,
}

Feature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Feature, new_mt)
new_mt.__index = function (self, key)
  -- If key is an alias, use its root
  if rawget(self, "aliases") ~= nil then
    if self.aliases[key] ~= nil then
      key = self.aliases[key]
    end
  end
  return rawget(self, key)
end

local status, aliases = pcall(require, "st.matter.clusters.aliases.DiscoBall.types.Feature")
if status then
  Feature.aliases = aliases
end

return Feature

