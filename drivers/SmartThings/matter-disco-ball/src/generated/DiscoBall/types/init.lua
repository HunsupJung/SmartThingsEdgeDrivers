-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local types_mt = {}
types_mt.__types_cache = {}
types_mt.__index = function(self, key)
  if types_mt.__types_cache[key] == nil then
    -- If key is an alias, use its root
    if rawget(self, "aliases") ~= nil then
      if self.aliases[key] ~= nil then
        key = self.aliases[key]
      end
    end
    local req_loc = string.format("generated.DiscoBall.types.%s", key)
    local cluster_type = require(req_loc)
    types_mt.__types_cache[key] = cluster_type
  end
  return types_mt.__types_cache[key]
end

--- @class generated.DiscoBallTypes
---
--- @field public RotateEnum generated.DiscoBall.types.RotateEnum
--- @field public StatusCode generated.DiscoBall.types.StatusCode

--- @field public Feature generated.DiscoBall.types.Feature
--- @field public WobbleBitmap generated.DiscoBall.types.WobbleBitmap
local DiscoBallTypes = {}

setmetatable(DiscoBallTypes, types_mt)

local status, aliases = pcall(require, "st.matter.clusters.aliases.DiscoBall.types")
if status then
  DiscoBallTypes.aliases = aliases
end

return DiscoBallTypes

